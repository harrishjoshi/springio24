package com.harrishjoshi.distributed.scheduling.utils;

import com.harrishjoshi.distributed.scheduling.builder.CardBuilder;
import com.harrishjoshi.distributed.scheduling.entity.Card;
import com.harrishjoshi.distributed.scheduling.entity.Customer;
import com.harrishjoshi.distributed.scheduling.enums.CardTypes;

import java.time.LocalDate;
import java.util.Random;

import static com.harrishjoshi.distributed.scheduling.enums.CardStatus.ACTIVE;

public class CardUtils {

    private static final Random RANDOM = new Random();

    /**
     * Creates a new card with a unique card number, card type, CVV, and expiration date.
     * The card number is generated using the {@link #generateCardNumber()} method.
     * The card type is randomly selected from the {@link CardTypes} enum.
     * The CVV is generated based on the expiration date of the card.
     * The expiration date is generated based on the index of the card.
     * The status of the card is set to {@link com.harrishjoshi.distributed.scheduling.enums.CardStatus#ACTIVE}.
     *
     * @param index the index, while generating the card.
     * @return the generated card.
     */
    public static Card createCard(int index, Customer customer) {
        var expirationDate = generateExpirationDate(index);
        return CardBuilder.builder()
                .withCardNumber(generateCardNumber())
                .withCardType(generateCardType())
                .withExpirationDate(expirationDate)
                .withStatus(ACTIVE)
                .withCvv(generateCvv(expirationDate))
                .withCustomer(customer)
                .build();
    }

    /**
     * Generates a CVV based on the expiration date of the card.
     * The CVV is generated by concatenating the month and the last two digits of the year.
     *
     * @param expirationDate the expiration date of the card.
     * @return the generated CVV.
     */
    private static String generateCvv(LocalDate expirationDate) {
        return expirationDate.getMonthValue() + "" + expirationDate.getYear() % 100;
    }

    /**
     * The card type is randomly selected from the {@link CardTypes} enum.
     * Return the generated card type.
     */
    private static String generateCardType() {
        return CardTypes.values()[RANDOM.nextInt(CardTypes.values().length)].name();
    }

    /**
     * Generates a random expiration date for the card.
     * The expiration date is determined based on the index of the card:
     * - If the index is divisible by 3, the expiration date is set to a date in the past.
     * - Otherwise, the expiration date is set to a date in the future within a maximum range of 24 months.
     *
     * @param index the index, while generating the card.
     * @return the generated expiration date.
     */
    private static LocalDate generateExpirationDate(int index) {
        if (index % 3 == 0) {
            return LocalDate.now().minusMonths(index % 24);
        } else {
            return LocalDate.now().plusMonths(index % 24);
        }
    }


    /**
     * Generates a unique 12-digit random card number with dashes.
     *
     * @return the generated card number.
     */
    public static String generateCardNumber() {
        // Generate up to 12 digits
        var number = (long) (RANDOM.nextDouble() * 1_000_000_000_000L);
        var rawNumber = String.format("%012d", number);
        // Insert dashes after every 4 digits
        return rawNumber.replaceAll("(.{4})", "$1-").substring(0, 14);
    }
}